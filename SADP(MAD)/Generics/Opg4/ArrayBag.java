package Opg4;import java.util.Arrays;public class ArrayBag<T> implements BagI<T> {	private T[] array;	private int numberOfElements;	/** Creates an empty bag whose initial capacity is 25. */	public ArrayBag() {		this(25);	}	public ArrayBag(int capacity) {		array = (T[]) new Object[capacity];	}	public boolean add(T newEntry) {		boolean result = false;		if (!isFull()) {			array[numberOfElements] = newEntry;			numberOfElements++;			result = true;		}		return result;	}	public boolean isFull() {		return numberOfElements == array.length;	}	public T[] toArray() {		T[] result = (T[]) new Object[numberOfElements];		for (int i = 0; i < numberOfElements; i++) {			result[i] = array[i];		}		return result;	}	public boolean isEmpty() {		return numberOfElements == 0;	}	public int getCurrentSize() {		return numberOfElements;	}	public int getFrequencyOf(T anEntry) {		int result = 0;		for (int i = 0; i < numberOfElements; i++) {			if (array[i].equals(anEntry)) {				result++;			}		}		return result;	}	public boolean contains(T anEntry) {		return indexOf(anEntry) > -1;	}	public void clear() {		numberOfElements = 0;	}	public T remove() {		return removeElement(numberOfElements - 1);	}	public boolean remove(T anEntry) {		int index = indexOf(anEntry);		T removed = removeElement(index);		return anEntry.equals(removed);	}	private T removeElement(int index) {		T result = null;		if (!isEmpty() && index > -1) {			result = array[index];			numberOfElements--;			array[index] = array[numberOfElements];			array[numberOfElements] = null;		}		return result;	}	private int indexOf(T anEntry) {		boolean found = false;		int result = -1;		int i = 0;		while (!found && i < numberOfElements) {			if (array[i].equals(anEntry)) {				found = true;				result = i;			} else {				i++;			}		}		return result;	}}